#!/usr/bin/env node --preserve-symlinks

const chalk = require('chalk')
const requiredVersion = require('../package.json').engines.node
const pkgVersion = require('../package.json').version
const semver = require('semver');
const program = require('commander');
const helper = require('../lib/helper')

const console = helper.stdErrConsole();

function checkNodeVersion (wanted, id) {
  if (!semver.satisfies(process.version, wanted)) {
    console.log(chalk.red(
      'You are using Node ' + process.version + ', but this version of ' + id +
      ' requires Node ' + wanted + '.\nPlease upgrade your Node version.'
    ))
    process.exit(1)
  }
}

checkNodeVersion(requiredVersion, 'vue-cli')

// ----------------------------------------------------------------------------
function RunWithES6( script, options, args ) {

  const dry         = options.parent.dry || false;
  const verbose     = options.parent.verbose || false;
  const printJson   = options.parent.printJson || false;
  let environment   = options.parent.project;

  if ( !environment ) { // TODO: True for all subprograms?
    try {
      environment = helper.getFirebaseProject();
    } catch ( e ) {
      console.log(
        process.cwd() + " doesn't seem to be a project directory.\n" +
        chalk.red('helios cli tool can only be run in a project directory. Did you run "firebase init"?'))
      process.exit(1)
    }
  }

  // TODO: Load .helios.js
  // TODO: Load .heliosrc

  const requireES6 = require("esm")(module)
  // requireES6('module-alias/register')

  let hrstart = process.hrtime()
  let cmd = requireES6( script )
  let promise = null;

  const handleError = (err) => {
    console.log(chalk.red("❌ ERROR"), err.message);
    if ( verbose ) {
      console.log(err)
      console.log("-".repeat(80))
      console.log(err.stack)
      console.log("-".repeat(80))
    }
    process.exit(1)
  }

  const handleSuccess = () => {
    let hrend = process.hrtime(hrstart)
    console.info(chalk.green('✅ Execution time: %ds %dms'), hrend[0], hrend[1] / 1000000);
    process.exit(0)
  }

  try {
    if ( typeof cmd.main === 'function' ) {
      promise = cmd.main(args, environment, dry, verbose, printJson);
    } else if ( typeof cmd.default === 'function' ) {
      promise = cmd.default(args, environment, dry, verbose, printJson);
    }
  } catch ( err ) {
    handleError(err)
  }

  Promise.resolve(promise).then(handleSuccess).catch(handleError)
}

// ----------------------------------------------------------------------------
program
  .version( pkgVersion )
  .option("-d, --dry", "Perform a dry run (nothing is changed)")
  .option("-v, --verbose", "Be verbose")
  .option("-j, --print-json", "Print output as JSON, not pretty tables")
  .option("-P, --project [projectId]", "Firebase project")
  .usage("[global options] command")

// ----------------------------------------------------------------------------
program
  .command('rules').alias("r")
  .description('Generate rules')
  .option("--skip-types", "Skip loading type definition from model config")
  .option("--only-types", "Only load type definition from model config")
  .option("--gen-paths", "Generate rule paths instead of schema")
  .option("-w, --write <filename>", "Write bolt definition to file")
  .action((options) => {

    const skipTypes = !! options['skipTypes'];
    const onlyTypes = !! options['onlyTypes'];
    const genPaths  = !! options['genPaths'];
    const filename  = options['write'];

    if ( !filename ) {
      console.log(chalk.red('Missing write filename. Please provide a filename with "--write <output.bolt>"'));
      process.exit(1)
    }

    RunWithES6('../routines/create_rules', options,
      { filename, skipTypes, onlyTypes, genPaths });
  });

// ----------------------------------------------------------------------------
program
  .command('check').alias("c")
  .description('Check schema for errors')
  .option("-f, --file <filename>", "Config file")
  .action((options) => {

    const filename  = options['file'] || null;
    // if ( !filename ) {
    //   throw new Error('missing write filename')
    // }

    RunWithES6('../routines/check_schema', options, { filename });
  });

// ----------------------------------------------------------------------------
program
  .command('init').alias("i")
  .description('Initialize helios config')
  .action((options) => {
    RunWithES6('../routines/initialize', options, {});
  });

// ----------------------------------------------------------------------------
program
  .command('gen-model <name>').alias("m")
  .description('Generate a new model')
  .action((options) => {
    let name = options['name'] || null;
    RunWithES6('../routines/make_model', options, { name });
  });

// ----------------------------------------------------------------------------
// error on unknown commands
program.on('command:*', () => {
  console.error('Invalid command: %s\nSee --help for a list of available commands.', program.args.join(' '));
  process.exit(1);
});

program.parse(process.argv);

if ( process.argv.length === 2 ) {
  program.help();
}
