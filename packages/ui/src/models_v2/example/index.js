// store.js
// model.js
// list.js

export default {
  model: ExampleModel,
  list: ExampleList, // "collection" ?
  store: ExampleStore,
}

// ------------------------
class ExampleModel extends Model {

  constructor({ name, test }) {
    this.test = test || null;
    this.name = name || 'x';
  }

  setup() {
  },

  static relations() {
    return {
      relation: 'Task'
    }
    // Will auto-generate fields: taskId = *, goalId, userId

    return { // 1:1 or n:1 or n:m relationship
      relation: 'Task',
      fields: {
        goalId: { name: 'goalTaskId' }, // overwrite name
        taskId: {},
      }
    }
  }

  static fields() {
    this.$add('test', "", )
    this.$add('test')

    return {
      field: {},
      field: {
        type: 'String',
        required: true,
        identifier: 'f',
        validate: () => true,
        dbIndex: true,
      },
      field: {
        type: { bolt: 'String', client: String },
        type: { server: 'String', client: String },
      },
      goalId: {
        type: 'Relation',
        relation: 'Goal',
      },
      tasklist: { // 1:n relationship
        type: 'Task[]',
      }
    }
  }

  // Inheritet: save, update, ...
}

// ------------------------

class ExampleList extends List {

  getAll() {

  }

  rules() {

  }

  index() {

  }

}

// ------------------------

class ExampleStore extends FirebaseStore {

  templatePath: '/foobar/{myid}/*', // "tablePath", "pathTemplate", "location"

  templatePath: '/goal/{goalId}/task/{*taskId}',
  templatePath: '/goal/{goalId}/task/<taskId>',
  templatePath: '/goal/{goalId}/task/*:taskId',
  templatePath: '/goal/{goalId}/task/{*:taskId}',
  templatePath: '/goal/{goalId}/task/{taskId:*}',
  templatePath: '/goal/{goalId}/task/{taskId}',
  templatePath: '/goal/{goalId}/task/*', primaryKey: 'taskId',
  // or autogenerated exampleId ?

  generateIdMethod: 'SLUGID',
  generateIdMethod: Methods.SLUGID,

  generateId({ ... }) {

  }
}

// ------------------------


// or more functional api?
export default {
  setup({ $prop }) {
    $prop('foobar')
    $prop('foobar')
    $prop('foobar')
  }
}

// ------------------------





// ------------------------
// ------------------------


