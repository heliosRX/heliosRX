import { _Vue as Vue } from '../external-deps'
import { warn, WARNING_NO_SCHEMA } from "../util/log"
// import { info, INFO_HMR } from "../util/log"

export default {

  configure({ GenericList, GenericModel }) {
    this.GenericList = GenericList;
    this.GenericModel = GenericModel;
  },

  // -----------------------------------------------------------------------------
  make_reactive_list( modelDefinition, dataList, context, no_reactive_getters = false ) {

    // TODO: Error when not inintialized

    let name = context.model.name;
    let reactive_list = new this.GenericList( name );

    if ( dataList ) {
      for ( let id in dataList ) {
        let item = this.make_reactive_model( modelDefinition, dataList[ id ], context )
        item.$id = id;
        item._update_data( dataList[ id ], modelDefinition.schema.fields ) // DOPPELT?
        reactive_list._add_child( id, item );
      }
      reactive_list.$readyAll = true;
      reactive_list.$numReady = Object.keys( dataList ).length;
    }

    // TODO: Implementd custom global actions / getters here too

    if ( modelDefinition.listActions ) {
      reactive_list._decorate_actions( modelDefinition.listActions, context );
    }

    if ( modelDefinition.listGetters
         && !no_reactive_getters
         && !modelDefinition.no_reactive_getters ) {
      reactive_list._decorate_getters( modelDefinition.listGetters, context );
    }

    Vue.observable( reactive_list );
    return reactive_list
  },

  // -----------------------------------------------------------------------------
  make_reactive_model(
    modelDefinition,
    data,
    context,
    is_dirty = false,
    no_reactive_getters = false
  ) {

    // TODO: Error when not inintialized

    let name = context.model.name;
    let load_result = new this.GenericModel( null, null, name )
    load_result._set_generic_store( context.model );

    if ( modelDefinition.schema && modelDefinition.schema.fields ) {
      load_result._autogenerate_props( modelDefinition.schema.fields, data, is_dirty )
    } else {
      warn(WARNING_NO_SCHEMA, 'Making a reactive model without schema. This means props are not autogenerated and only accessible through model.$state. Please provide a schema for ' + name + '.');
    }

    if ( data ) {
      load_result._update_data( data, modelDefinition.schema.fields )
      load_result.$ready = true;
    }

    if ( modelDefinition.modelActions ) {
      load_result._decorate_actions( modelDefinition.modelActions, context );
    }

    /* add model getters:
       - attach vm only if there are getters - otherwise there is no need
       - attach vm only if flag 'no_reactive_getters' is not set in model definition
       - attach vm only if flag 'no_reactive_getters' is not set during model instantiation
    */
    if ( modelDefinition.modelGetters
         && !no_reactive_getters
         && !modelDefinition.no_reactive_getters ) {
      load_result._decorate_getters( modelDefinition.modelGetters, context );
    }

    /*
    TODO: Implement HMR

    if ( module.hot && modelDefinition.hotUpdate ) {
      // TODO: Testen
      let hotUpdateList = modelDefinition.hotUpdate();
      let filelist = []
      for ( let relative_filename in hotUpdateList ) {
        let filename = './src/models/' + name + '/' + relative_filename;
        filelist.push( filename )
      }
      info(INFO_HMR, "list", filelist);
      module.hot.accept([filelist], (updated_file, deps) => {
        info(INFO_HMR, "update model", updated_file, deps);
        // Parse "./src/api/<moduleName>.js"
        let moduleName = updated_file[0].split('/').pop();
        info(INFO_HMR, "update model %c<" + moduleName + ">", 'color: #42b983');
        let target = hotUpdateList[ moduleName ];
        let moduleData = require('./src/models/' + name + '/' + moduleName)
        for ( var prop in moduleData ) {
          target[ prop ] = moduleData[ prop ]
        }
        // Why not just update entire model?
      })
    }
    */

    Vue.observable( load_result );

    return load_result;
  }
}
